/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import io.ManipFichier;
import ui.ajout_modification.PanneauModification;
import java.awt.Color;
import java.awt.Font;
import java.awt.HeadlessException;
import java.util.Locale;
import java.util.ResourceBundle;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.GroupLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import modele.ListeProfils;
import modele.ListeQuestions;
import modele.Profil;
import utils.GestionImage;
import utils.GestionScenario;

/**
 *
 * @author Ferfar Imad Eddine
 */
public class FenPrincipale extends javax.swing.JFrame {

    private ListeQuestions listeQuestions;
    private Profil monProfil;
    private ListeProfils maListeProfils;

    private ListePanneaux listePanneaux;
    private PanneauDebutQuiz pnlDebut;
    private FenAvantLancement fenetre;
    private PanneauResultat pnlResultat;
    private PanneauModification pnlGestion;

    private JPanel[] pnlTab;
    private JProgressBar progressBar;
    private GroupLayout groupLay;
    private JButton btnPrecedent;
    private JButton btnSuivant;
    private JLabel lblNumerotation;

    private JButton btnRetour;
    private JButton btnCommencer;
    private JButton btnConfirmer;
    private JButton btnAnnuler;

    private JPanel pnlHaut;
    private JPanel pnlBas;
    private JButton btnRevenir;
    private JButton btnNouveauTest;
    private JButton btnResultat;

    private int nombreQuestion;
    private int compteur = 0;
    private String utilisateur;
    private int minuterie;
    private String[] lesReponses;

    private int typeQuestShoisies;

    private static int intervalle = 0;
    private static Timer minuteur;

    //internationalisation
    private Locale localCourant;
    private ResourceBundle monBundle;

    //Constructeurs
    public FenPrincipale() {
        initComponents();
    }

    public FenPrincipale(ListeQuestions listeQuestion, ListeProfils maListeProfils, Locale locale) {
        this();
        this.listeQuestions = listeQuestion;
        this.maListeProfils = maListeProfils;
        localCourant = locale;
        monBundle = ResourceBundle.getBundle("proprietes.Internationalisation", localCourant);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        pnlPrincipal = new javax.swing.JPanel();
        lblImage = new javax.swing.JLabel();
        pnlGauche = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        btnLancerScenario = new javax.swing.JButton();
        btnParcourir = new javax.swing.JButton();
        btnAfficher = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        menuFichier = new javax.swing.JMenu();
        itemEnregistrer = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        itemQuitter = new javax.swing.JMenuItem();
        menuEditer = new javax.swing.JMenu();
        itemGererQues = new javax.swing.JMenuItem();
        menuLangue = new javax.swing.JMenu();
        radBtnFr = new javax.swing.JRadioButtonMenuItem();
        radBtnEn = new javax.swing.JRadioButtonMenuItem();
        radBtnAr = new javax.swing.JRadioButtonMenuItem();
        radBtnEs = new javax.swing.JRadioButtonMenuItem();
        menuAide = new javax.swing.JMenu();
        itemDiagrammes = new javax.swing.JMenu();
        itemDiagCasUtilisation = new javax.swing.JMenuItem();
        itemDiagClasse = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        itemApropos = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("proprietes/Internationalisation"); // NOI18N
        setTitle(bundle.getString("Titre")); // NOI18N
        setBounds(new java.awt.Rectangle(0, 0, 990, 690));
        setName("frame"); // NOI18N
        setPreferredSize(new java.awt.Dimension(1000, 700));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(null);

        pnlPrincipal.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED, null, new java.awt.Color(0, 102, 102), null, null));
        pnlPrincipal.setPreferredSize(new java.awt.Dimension(770, 450));
        pnlPrincipal.setLayout(new javax.swing.OverlayLayout(pnlPrincipal));

        lblImage.setIcon(new ImageIcon(GestionImage.ajusterImage(new ImageIcon(getClass().getResource("/images/livre-java.jpeg")).getImage(), 750, 450)));
        lblImage.setPreferredSize(new java.awt.Dimension(147, 168));
        pnlPrincipal.add(lblImage);

        getContentPane().add(pnlPrincipal);
        pnlPrincipal.setBounds(220, 100, 750, 450);

        pnlGauche.setLayout(new java.awt.GridLayout(0, 1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 3, 22)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 102, 102));
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/java_coffee_21855 (2).png"))); // NOI18N
        jLabel3.setText("<html>Quizz en Java</html>");
        pnlGauche.add(jLabel3);

        btnLancerScenario.setFont(new java.awt.Font("Tahoma", 0, 21)); // NOI18N
        btnLancerScenario.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Test-paper-icon.png"))); // NOI18N
        btnLancerScenario.setText("<html>"+java.util.ResourceBundle.getBundle("proprietes/Internationalisation").getString("BQuizz")+"</html>"); // NOI18N
        btnLancerScenario.setMaximumSize(new java.awt.Dimension(90, 25));
        btnLancerScenario.setMinimumSize(new java.awt.Dimension(90, 25));
        btnLancerScenario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLancerScenarioActionPerformed(evt);
            }
        });
        pnlGauche.add(btnLancerScenario);

        btnParcourir.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        btnParcourir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/data-management-icon.png"))); // NOI18N
        btnParcourir.setText("<html>"+java.util.ResourceBundle.getBundle("proprietes/Internationalisation").getString("BParcourir")+"</html>"); // NOI18N
        btnParcourir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnParcourirActionPerformed(evt);
            }
        });
        pnlGauche.add(btnParcourir);

        btnAfficher.setFont(new java.awt.Font("Tahoma", 0, 21)); // NOI18N
        btnAfficher.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Status-mail-task-icon.png"))); // NOI18N
        btnAfficher.setText("<html>"+java.util.ResourceBundle.getBundle("proprietes/Internationalisation").getString("BAfficher")+"</html>"); // NOI18N
        btnAfficher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAfficherActionPerformed(evt);
            }
        });
        pnlGauche.add(btnAfficher);

        getContentPane().add(pnlGauche);
        pnlGauche.setBounds(19, 25, 190, 540);

        menuBar.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        menuFichier.setText(bundle.getString("MFichier")); // NOI18N
        menuFichier.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N

        itemEnregistrer.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        itemEnregistrer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Database-icon (1).png"))); // NOI18N
        itemEnregistrer.setText(bundle.getString("MEnregistrer")); // NOI18N
        itemEnregistrer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemEnregistrerActionPerformed(evt);
            }
        });
        menuFichier.add(itemEnregistrer);
        menuFichier.add(jSeparator1);

        itemQuitter.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        itemQuitter.setText(bundle.getString("MQuitter")); // NOI18N
        itemQuitter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemQuitterActionPerformed(evt);
            }
        });
        menuFichier.add(itemQuitter);

        menuBar.add(menuFichier);

        menuEditer.setText(bundle.getString("MEditer")); // NOI18N
        menuEditer.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N

        itemGererQues.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        itemGererQues.setText(bundle.getString("MGererQues")); // NOI18N
        itemGererQues.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemGererQuesActionPerformed(evt);
            }
        });
        menuEditer.add(itemGererQues);

        menuBar.add(menuEditer);

        menuLangue.setText(bundle.getString("MLangue")); // NOI18N
        menuLangue.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N

        buttonGroup1.add(radBtnFr);
        radBtnFr.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        radBtnFr.setSelected(true);
        radBtnFr.setText("Français");
        radBtnFr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radBtnFrActionPerformed(evt);
            }
        });
        menuLangue.add(radBtnFr);

        buttonGroup1.add(radBtnEn);
        radBtnEn.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        radBtnEn.setText(" English");
        radBtnEn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radBtnFrActionPerformed(evt);
            }
        });
        menuLangue.add(radBtnEn);

        buttonGroup1.add(radBtnAr);
        radBtnAr.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        radBtnAr.setText("العربية");
        radBtnAr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radBtnFrActionPerformed(evt);
            }
        });
        menuLangue.add(radBtnAr);

        buttonGroup1.add(radBtnEs);
        radBtnEs.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        radBtnEs.setText("Español");
        radBtnEs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radBtnFrActionPerformed(evt);
            }
        });
        menuLangue.add(radBtnEs);

        menuBar.add(menuLangue);

        menuAide.setText(bundle.getString("MAide")); // NOI18N
        menuAide.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N

        itemDiagrammes.setText(bundle.getString("MDiagramme")); // NOI18N

        itemDiagCasUtilisation.setText(bundle.getString("MDiagCas")); // NOI18N
        itemDiagCasUtilisation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemDiagCasUtilisationActionPerformed(evt);
            }
        });
        itemDiagrammes.add(itemDiagCasUtilisation);

        itemDiagClasse.setText(bundle.getString("MDiagClasse")); // NOI18N
        itemDiagClasse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemDiagClasseActionPerformed(evt);
            }
        });
        itemDiagrammes.add(itemDiagClasse);

        menuAide.add(itemDiagrammes);
        menuAide.add(jSeparator2);

        itemApropos.setText(bundle.getString("MApropos")); // NOI18N
        itemApropos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemAproposActionPerformed(evt);
            }
        });
        menuAide.add(itemApropos);

        menuBar.add(menuAide);

        setJMenuBar(menuBar);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void miseAjourLangue() {

        //changement du titre
        setTitle(monBundle.getString("Titre"));

        //chargement des labels
        btnLancerScenario.setText("<html>" + monBundle.getString("BQuizz") + "</html>");
        btnParcourir.setText("<html>" + monBundle.getString("BParcourir") + "</html>");
        btnAfficher.setText("<html>" + monBundle.getString("BAfficher") + "</html>");

        menuFichier.setText(monBundle.getString("MFichier"));
        itemEnregistrer.setText(monBundle.getString("MEnregistrer"));
        itemQuitter.setText(monBundle.getString("MQuitter"));
        menuEditer.setText(monBundle.getString("MEditer"));
        itemGererQues.setText(monBundle.getString("MGererQues"));
        menuLangue.setText(monBundle.getString("MLangue"));
        menuAide.setText(monBundle.getString("MAide"));
        itemDiagrammes.setText(monBundle.getString("MDiagramme"));
        itemDiagCasUtilisation.setText(monBundle.getString("MDiagCas"));
        itemDiagClasse.setText(monBundle.getString("MDiagClasse"));
        itemApropos.setText(monBundle.getString("MApropos"));
    }

    // Bouton Lancer Scénario
    private void btnLancerScenarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLancerScenarioActionPerformed
        //Panneau Choix de paramètres 
        pnlDebut = new PanneauDebutQuiz(monBundle);
        getContentPane().remove(pnlPrincipal);
        getContentPane().add(pnlDebut);

        btnLancerScenario.setEnabled(false);
        btnParcourir.setEnabled(false);
        btnAfficher.setEnabled(false);

        btnCommencer = new JButton(monBundle.getString("BCommencer"));
        btnRetour = new JButton(monBundle.getString("BRetour"));
        btnCommencer.setFont(new java.awt.Font("Tohoma", 1, 15));
        btnCommencer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCommencerActionPerformed(evt);
            }
        });
        getContentPane().add(btnCommencer);
        btnCommencer.setBounds(740, 550, 150, 30);
        btnCommencer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Start-icon.png")));
        btnRetour.setFont(new java.awt.Font("Tohoma", 1, 15));
        btnRetour.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Go-back-icon.png")));
        //Retour au menu principal
        btnRetour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getContentPane().remove(pnlDebut);
                getContentPane().remove(btnCommencer);
                getContentPane().remove(btnRetour);
                getContentPane().add(pnlPrincipal);

                btnLancerScenario.setEnabled(true);
                btnParcourir.setEnabled(true);
                btnAfficher.setEnabled(true);
                setContentPane(getContentPane());
                menuFichier.setEnabled(true);
                menuEditer.setEnabled(true);
                menuLangue.setEnabled(true);
            }
        });
        getContentPane().add(btnRetour);
        btnRetour.setBounds(230, 550, 150, 30);
        setContentPane(getContentPane());
        menuFichier.setEnabled(false);
        menuEditer.setEnabled(false);
        menuLangue.setEnabled(false);
    }//GEN-LAST:event_btnLancerScenarioActionPerformed

    // Bouton Commencer Scénario
    private void btnCommencerActionPerformed(java.awt.event.ActionEvent evt) {
        utilisateur = ((pnlDebut.getUtilisateur().equals("")) ? "Utilisateur" : pnlDebut.getUtilisateur());
        nombreQuestion = pnlDebut.getNombreQuestion();
        typeQuestShoisies = pnlDebut.getTypeQuestion();
        if (validerNombreQuestion()) {
            minuterie = pnlDebut.getMinuterie();
            lesReponses = new String[nombreQuestion];
            fenetre = new FenAvantLancement(5);
            lancerCinqSecondes(5);
            this.setEnabled(false);
        }
    }

    // valider le type de question choisies par rapport au nombre de question enregistrées
    private boolean validerNombreQuestion() {
        if (listeQuestions.nombreQuestion(typeQuestShoisies) >= nombreQuestion) {
            return true;
        } else {
            JOptionPane.showMessageDialog(null, "Désolé, les types de questions choisies ne correspondent pas\n"
                    + "avec le nombre de questions enregistrées,\n"
                    + "veuillez ajouter d’autres types de questions svp :(", "Nombre de questions insuffisant", JOptionPane.INFORMATION_MESSAGE);
            return false;
        }
    }

    // item menu Gestion Questions
    private void itemGererQuesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemGererQuesActionPerformed

        getContentPane().removeAll();
        pnlGestion = new PanneauModification(listeQuestions);
        getContentPane().add(pnlGestion);

        ajoutBouttonRetour();
        btnRetour.setBounds(49, 595, 235, 31);
        setContentPane(getContentPane());
        menuFichier.setEnabled(false);
        menuEditer.setEnabled(false);
        menuLangue.setEnabled(false);
    }//GEN-LAST:event_itemGererQuesActionPerformed

    // Bouton Afficher Questions
    private void btnAfficherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAfficherActionPerformed
        getContentPane().removeAll();
        getContentPane().add(new PanneauAffichage(listeQuestions));

        ajoutBouttonRetour();
        setContentPane(getContentPane());
        menuFichier.setEnabled(false);
        menuEditer.setEnabled(false);
        menuLangue.setEnabled(false);
    }//GEN-LAST:event_btnAfficherActionPerformed

    // Bouton Parcourir Questions
    private void btnParcourirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnParcourirActionPerformed
        getContentPane().removeAll();
        getContentPane().add(new PanneauParcoursPrincipal(listeQuestions));

        ajoutBouttonRetour();
        setContentPane(getContentPane());
    }//GEN-LAST:event_btnParcourirActionPerformed

    // Radio boutons, pour changer la langue
    private void radBtnFrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radBtnFrActionPerformed
        if (radBtnFr.isSelected()) {
            localCourant = new Locale("fr", "CA");
        } else if (radBtnEn.isSelected()) {
            localCourant = new Locale("en", "US");
        } else if (radBtnAr.isSelected()) {
            localCourant = new Locale("ar", "DZ");
        } else if (radBtnEs.isSelected()) {
            localCourant = new Locale("es", "ES");
        }
        monBundle = ResourceBundle.getBundle("proprietes.Internationalisation", localCourant);
        miseAjourLangue();
    }//GEN-LAST:event_radBtnFrActionPerformed

    //Quitter l’application
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        quitterLapplication();
    }//GEN-LAST:event_formWindowClosing
    private void quitterLapplication() throws HeadlessException {
        boolean flag;
        try {
            flag = pnlGestion.isEtatManip();
        } catch (NullPointerException e) {
            flag = false;
        }

        if (!flag) {
            String[] choix = {"Oui", "Annuler"};
            int reponse = JOptionPane.showOptionDialog(null,
                    "Voulez-vous quitter l'application", "Confirmation",
                    JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, choix, choix[0]);
            switch (reponse) {
                case 0:
                    System.exit(0);  //quitter
                    // dispose();
                    break;
                case 1: // annuler
                    break;
            }
        } else {
            String[] choix = {"Enregistrer", "Ne pas enregistrer", "Anuuler"};
            int reponse = JOptionPane.showOptionDialog(null,
                    "Enregistrer vos modifications dans les fichiers", "Confirmation",
                    JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE,
                    new javax.swing.ImageIcon(getClass().getResource("/images/Misc-Delete-Database-icon (1).png")),
                    choix, choix[0]);
            switch (reponse) {
                case 0:
                    enregistrerModifications();
                    dispose();
                    break;
                case 1:
                    dispose();// ne pas enregistrer
                    break;
                case 2: // annuler
                    break;
            }
        }
    }

    //Item Diagramme de Cas d’utilisation
    private void itemDiagCasUtilisationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemDiagCasUtilisationActionPerformed
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FenDiagramme(0).setVisible(true);
            }
        });
    }//GEN-LAST:event_itemDiagCasUtilisationActionPerformed
    //Item Diagramme de Classe de Conception
    private void itemDiagClasseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemDiagClasseActionPerformed
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FenDiagramme(1).setVisible(true);
            }
        });
    }//GEN-LAST:event_itemDiagClasseActionPerformed

    // item Enregistrement sur fichier (out)
    private void itemEnregistrerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemEnregistrerActionPerformed
        enregistrerModifications();
    }//GEN-LAST:event_itemEnregistrerActionPerformed
    // item Quitter l’application
    private void itemQuitterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemQuitterActionPerformed
        quitterLapplication();
    }//GEN-LAST:event_itemQuitterActionPerformed

    // item A propos
    private void itemAproposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemAproposActionPerformed
        JOptionPane.showMessageDialog(null, "20-A07-BB PROGRAMMATION PAR COMPOSANTS I \n"
                + "Projet de session : Programmation JAVA, préparer  une entrevue \n"
                + "Réalisé par : Imad Eddine Ferfar", "À propos", JOptionPane.INFORMATION_MESSAGE,
                new javax.swing.ImageIcon(getClass().getResource("/images/About-icon.png")));
    }//GEN-LAST:event_itemAproposActionPerformed

    // Méthode enregistrer modification
    private void enregistrerModifications() {
        ManipFichier.ecrireFichier("Fichiers\\data_QCM.txt", listeQuestions.listingQCM());
        ManipFichier.ecrireFichier("Fichiers\\data_resultatExe.txt", listeQuestions.listingResultatExecution());
        ManipFichier.ecrireFichier("Fichiers\\data_ImageAvecErreurs.txt", listeQuestions.listingImageCinqErreurs());
        ManipFichier.ecrireFichier("Fichiers\\data_listingErreurs.txt", listeQuestions.listingErreursSurImage());        //fichier liste des erreurs (1 erreur par question pour cette version)                               
        JOptionPane.showMessageDialog(null, "Les modifications ont été bien enregistrés:\n",
                "Question modifiée avec succès", JOptionPane.INFORMATION_MESSAGE,
                new javax.swing.ImageIcon(getClass().getResource("/images/Database-icon.png")));
        try {
            pnlGestion.setEtatManip(false);
        } catch (NullPointerException e) {
            // ok
        }
    }

    // Méthode ajouter le bouton Retour
    private void ajoutBouttonRetour() {
        btnRetour = new JButton("Retour vers menu principal");
        btnRetour.setFont(new java.awt.Font("Tahoma", 0, 13));
        btnRetour.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Go-back-icon.png")));
        btnRetour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getContentPane().removeAll();
                getContentPane().add(pnlPrincipal);
                getContentPane().add(pnlGauche);

                btnLancerScenario.setEnabled(true);
                btnParcourir.setEnabled(true);
                btnAfficher.setEnabled(true);
                setContentPane(getContentPane());
                menuFichier.setEnabled(true);
                menuEditer.setEnabled(true);
                menuLangue.setEnabled(true);
            }
        });
        getContentPane().add(btnRetour);
        btnRetour.setBounds(49, 0, 235, 31);
    }

    // Ajouter le Panneau Haut (tableau des panneaux)
    private void ajouterPanneauHaut() {
        pnlHaut = new JPanel();
        pnlHaut.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        pnlHaut.setLayout(new java.awt.GridLayout(1, 0));
        pnlHaut.setBounds(50, 30, 855, 30);
        pnlTab = new JPanel[nombreQuestion];
        for (int i = 0; i < nombreQuestion; i++) {
            pnlTab[i] = new JPanel();
            //  pnlTest = new JPanel();
            pnlTab[i].setBackground(new java.awt.Color(205, 205, 205));
            // pnlTab[i].setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
            //pnlTab[i].setBorder(javax.swing.BorderFactory.createEtchedBorder(null, new java.awt.Color(102, 102, 102)));
            pnlTab[i].setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
            pnlTab[i].addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    jPanelTabMouseClicked(evt);
                }
            });
            pnlTab[i].addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
                public void mouseMoved(java.awt.event.MouseEvent evt) {
                    jPanelTabMouseMoved(evt);
                }
            });
            pnlTab[i].addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseExited(java.awt.event.MouseEvent evt) {
                    jPanelTabMouseExited(evt);
                }
            });
            pnlTab[i].setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
            pnlHaut.add(pnlTab[i]);
        }
        //pnlTab[0].setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 102), 3));
        pnlTab[compteur].setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(pnlHaut);
    }

    // Ajouter ProgressBar en bas
    private void ajouterProgressBar() {
        progressBar = new JProgressBar();
        progressBar.setValue(100);
        progressBar.setBounds(50, 560, 885, 50);
        progressBar.setStringPainted(true);
        progressBar.setForeground(new java.awt.Color(0, 153, 153));
        progressBar.setString("");
        GroupLayout groupLay = new GroupLayout(progressBar);
        btnPrecedent = new JButton("Precedent");
        btnSuivant = new JButton("Suivant");
        btnPrecedent.setEnabled(false);
        btnSuivant.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Button-Next-icon.png")));
        btnPrecedent.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Button-Previous-icon.png")));
        btnPrecedent.setBounds(35, 9, 115, 33);
        btnSuivant.setBounds(735, 9, 115, 33);
        btnSuivant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getContentPane().remove(listePanneaux.getListing(compteur));
                //pnlTab[compteur].setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                pnlTab[compteur].setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
                compteur++;
                getContentPane().add(listePanneaux.getListing(compteur));
                //pnlTab[compteur].setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 102), 3));
                pnlTab[compteur].setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
                setContentPane(getContentPane());
                mettreAjourBoutonsEtNum();
            }
        });
        btnPrecedent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getContentPane().remove(listePanneaux.getListing(compteur));
                //pnlTab[compteur].setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                pnlTab[compteur].setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
                compteur--;
                getContentPane().add(listePanneaux.getListing(compteur));
                //pnlTab[compteur].setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 102), 3));
                pnlTab[compteur].setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
                setContentPane(getContentPane());
                mettreAjourBoutonsEtNum();
            }
        });
        lblNumerotation = new JLabel("(Question 1/" + nombreQuestion + ")");
        lblNumerotation.setFont(new java.awt.Font("Tahoma", 1, 15));
        lblNumerotation.setBounds(393, 13, 141, 25);
        progressBar.add(btnPrecedent);
        progressBar.add(btnSuivant);
        progressBar.add(lblNumerotation);
        getContentPane().add(progressBar);
    }

    //Mettre à jour les boutons et label numéro
    private void mettreAjourBoutonsEtNum() {
        if (compteur == 0) {
            btnPrecedent.setEnabled(false);
            btnSuivant.setEnabled(true);
        } else if (compteur == listePanneaux.getSize() - 1) {
            btnSuivant.setEnabled(false);
            btnPrecedent.setEnabled(true);
        } else {
            btnPrecedent.setEnabled(true);
            btnSuivant.setEnabled(true);
        }
        lblNumerotation.setText("(Question " + (compteur + 1) + "/" + nombreQuestion + ")");
        if (lesReponses[compteur] != null) {
            btnConfirmer.setEnabled(false);
        } else {
            btnConfirmer.setEnabled(true);
        }
    }

    //Actionneur click sur panel question
    private void jPanelTabMouseClicked(java.awt.event.MouseEvent evt) {
        int i = 0;
        while (evt.getSource() != pnlTab[i]) {
            i++;
        }
        if (compteur != i) {
            getContentPane().remove(listePanneaux.getListing(compteur));
            //pnlTab[compteur].setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
            pnlTab[compteur].setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
            compteur = i;
            getContentPane().add(listePanneaux.getListing(compteur));
            // pnlTab[compteur].setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 102), 3));
            pnlTab[compteur].setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
            setContentPane(getContentPane());
            mettreAjourBoutonsEtNum();
        }
    }

    //Actionneur sortir la souris - panel question
    private void jPanelTabMouseExited(java.awt.event.MouseEvent evt) {
        int i = 0;
        while (evt.getSource() != pnlTab[i]) {
            i++;
        }
        //pnlTab[i].setBackground(new java.awt.Color(205, 205, 205));
        pnlTab[i].setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        pnlTab[compteur].setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
    }

    //Actionneur bouger la souris - panel question
    private void jPanelTabMouseMoved(java.awt.event.MouseEvent evt) {
        int i = 0;
        while (evt.getSource() != pnlTab[i]) {
            i++;
        }
        // pnlTab[i].setBackground(new java.awt.Color(153, 153, 153));
        pnlTab[i].setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
    }

    //Lancer compte 5 Secondes avant debut
    private void lancerCinqSecondes(int secondes) {
        int retard = 1000;
        int periode = 1000;
        minuteur = new Timer();
        intervalle = secondes;
        minuteur.scheduleAtFixedRate(new TimerTask() {
            public void run() {
                intervalle--;
                fenetre.setsecondes(intervalle);
                //System.out.println(interval);
                if (intervalle == 0) {
                    minuteur.cancel();
                    getContentPane().remove(pnlDebut);
                    getContentPane().remove(btnCommencer);
                    getContentPane().remove(btnRetour);
                    getContentPane().remove(pnlGauche);

                    compteur = 0;
                    listePanneaux = GestionScenario.lancerScenario(nombreQuestion, listeQuestions, utilisateur, typeQuestShoisies);
                    monProfil = new Profil(utilisateur, nombreQuestion);
                    getContentPane().add(listePanneaux.getListing(compteur));
                    ajouterPanneauHaut();
                    ajouterProgressBar();
                    //ajouterPanneauBas();
                    ajouterBoutonConfirmer();
                    ajouterBoutonAnnuler();
                    lancerCompteArebours(minuterie * 60);
                    setContentPane(getContentPane());
                    fenetre.dispose();
                }
            }
        }, retard, periode);
    }

    // Méthode Lancer Compte à rebours
    private void lancerCompteArebours(int secondes) {
        int retard = 1000;
        int periode = 1000;
        this.setEnabled(true);
        minuteur = new Timer();
        intervalle = secondes;
        minuteur.scheduleAtFixedRate(new TimerTask() {
            public void run() {
                intervalle--;
                progressBar.setValue((intervalle * 100) / secondes);
                //System.out.println(interval);
                if (intervalle == 0) {
                    minuteur.cancel();
                    JOptionPane.showMessageDialog(null, "Désolé, le temps allou. à ce test est terminé",
                            "Test terminé", JOptionPane.INFORMATION_MESSAGE);
                    testTermine();
                }
            }
        }, retard, periode);
    }

    //Vérifier réponse QCM (choisir au moins une réponse)
    private boolean verifierCheckBox(int position) {
        for (int i = 0; i < listePanneaux.getListing(compteur).getQuestionQCM().getListeChoix().size(); i++) {
            if (listePanneaux.getListing(position).getTabChoix(i)) {
                return true;
            }
        }
        JOptionPane.showMessageDialog(null, "Attention! vous devez choisir au moins une reponse",
                "Erreur de choix", JOptionPane.ERROR_MESSAGE);
        return false;
    }

    //Valider Réponse ResExe
    private boolean validerReponseResExe(int compteur) {
        boolean flag = false;
       // System.out.println(listePanneaux.getListing(compteur).getTxtReponse());  //test visuel
        if (listePanneaux.getListing(compteur).getTxtReponse().getText().equals(listePanneaux.getListing(compteur).getQuestionResExe().getReponse())) {
            flag = true;
        }
        listePanneaux.getListing(compteur).getTxtReponse().setEditable(false);
        listePanneaux.getListing(compteur).afficherLblresultat(flag);
        return flag;
    }

    //Valider Réponse QuesImg
    private boolean validerReponseImg(int position) {
        boolean flag = false;
        try {
            listePanneaux.getListing(compteur).getTableReponses().getCellEditor().stopCellEditing();
        } catch (NullPointerException e) {
            // ce nest pas grave, jai enleve seulement lerreur
        }
        if (String.valueOf(listePanneaux.getListing(compteur).getTableReponses().getModel().getValueAt(0, 0)).equals(listePanneaux.getListing(compteur).getQuestionImg().getLigne(0)[0])
                && (String.valueOf(listePanneaux.getListing(compteur).getTableReponses().getModel().getValueAt(0, 1)).contains(listePanneaux.getListing(compteur).getQuestionImg().getLigne(0)[1]))
                && (String.valueOf(listePanneaux.getListing(compteur).getTableReponses().getModel().getValueAt(0, 2)).contains(listePanneaux.getListing(compteur).getQuestionImg().getLigne(0)[2]))) {
            flag = true;
        }
        listePanneaux.getListing(compteur).getTableReponses().setEnabled(false);
        listePanneaux.getListing(compteur).afficherLblresultat(flag);
        return flag;
    }

    // Valider Réponse QCM
    private boolean validerReponseQCM(int position) {
        boolean flag = true;
        for (int i = 0; i < listePanneaux.getListing(compteur).getTabChoix().length; i++) {
            // tabChoix[i].setEnabled(false);
            if (listePanneaux.getListing(compteur).getQuestionQCM().getReponses(i)) {
                listePanneaux.getListing(compteur).getTabChoix()[i].setBackground(new java.awt.Color(0, 204, 102));
                if (listePanneaux.getListing(compteur).getTabChoix()[i].isSelected()) {
                    listePanneaux.getListing(compteur).getTabChoix()[i].setFont(new java.awt.Font("Arial", 1, 15));
                    listePanneaux.getListing(compteur).getTabChoix()[i].setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Ok-icon (2).png")));
                } else {
                    listePanneaux.getListing(compteur).getTabChoix()[i].setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Erreur-icon (1).png")));
                    flag = false;
                }
            } else if (listePanneaux.getListing(compteur).getTabChoix()[i].isSelected()) {
                listePanneaux.getListing(compteur).getTabChoix()[i].setFont(new java.awt.Font("Arial", 1, 15));
                listePanneaux.getListing(compteur).getTabChoix()[i].setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Erreur-icon (1).png")));
                flag = false;
                listePanneaux.getListing(compteur).getTabChoix()[i].setBackground(new Color(255, 0, 51));
            } else {
                listePanneaux.getListing(compteur).getTabChoix()[i].setEnabled(false);
            }

            listePanneaux.getListing(compteur).getTabChoix()[i].removeMouseMotionListener(listePanneaux.getListing(compteur).getPasserSouris());
            listePanneaux.getListing(compteur).getTabChoix()[i].removeMouseListener(listePanneaux.getListing(compteur).getSortirSouris());
        }
        listePanneaux.getListing(compteur).afficherLblresultat(flag);

        for (int i = 0; i < listePanneaux.getListing(position).getQuestionQCM().getListeChoix().size(); i++) {
            if (listePanneaux.getListing(position).getTabChoix(i) != listePanneaux.getListing(position).getQuestionQCM().getReponses(i)) {
                return false;
            }
        }
        return true;
    }

    // Bouton Confirmer (répondre)
    private void ajouterBoutonConfirmer() {
        btnConfirmer = new JButton("Confirmer la réponse");
        btnConfirmer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                //System.out.println(listePanneau.getListing(compteur).getQuestionQCM());
                //System.out.println(listePanneau.getListing(compteur).getQuestionImg());
                //Verifier que cest une QCM ET lutilisateur a choisi au moins un reponse
                if ((listePanneaux.getListing(compteur).getQuestionQCM() != null) && (verifierCheckBox(compteur))) {
                    // valider la reponse et adapter laffichage (vrai /faux)
                    if (validerReponseQCM(compteur)) {
                        monProfil.ajouterNote(compteur);
                       // System.out.println(monProfil.getNotes()[compteur]);  //test visuel
                        lesReponses[compteur] = "true";
                        pnlTab[compteur].setBackground(new java.awt.Color(0, 204, 102));
                        btnConfirmer.setEnabled(false);
                    } else {
                        System.out.println("faux");
                        lesReponses[compteur] = "false";
                        pnlTab[compteur].setBackground(new java.awt.Color(255, 0, 51));
                        btnConfirmer.setEnabled(false);
                    }
                    btnConfirmer.setEnabled(false);
                } else if (listePanneaux.getListing(compteur).getQuestionImg() != null) {
                    // valider la reponse et adapter laffichage (vrai /faux)
                    if (validerReponseImg(compteur)) {
                        monProfil.ajouterNote(compteur);
                        System.out.println(monProfil.getNotes()[compteur]);
                        lesReponses[compteur] = "true";
                        pnlTab[compteur].setBackground(new java.awt.Color(0, 204, 102));
                    } else {
                        //System.out.println("faux");
                        lesReponses[compteur] = "false";
                        pnlTab[compteur].setBackground(new java.awt.Color(255, 0, 51));
                    }
                    btnConfirmer.setEnabled(false);
                } else if (listePanneaux.getListing(compteur).getQuestionResExe() != null) {
                    // valider la reponse et adapter laffichage (vrai /faux)
                    if (validerReponseResExe(compteur)) {
                        monProfil.ajouterNote(compteur);
                      //  System.out.println(monProfil.getNotes()[compteur]);
                        lesReponses[compteur] = "true";
                        pnlTab[compteur].setBackground(new java.awt.Color(0, 204, 102));
                    } else {
                        System.out.println("faux");
                        lesReponses[compteur] = "false";
                        pnlTab[compteur].setBackground(new java.awt.Color(255, 0, 51));
                    }
                    btnConfirmer.setEnabled(false);
                }
                //Fin de test
                if (finReponses()) {
                    testTermine();
                }
            }
        });

        add(btnConfirmer);
        btnConfirmer.setFont(new java.awt.Font("Tahoma", 1, 13));
        btnConfirmer.setBounds(390, 530, 210, 29);
        btnConfirmer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Actions-dialog-ok-icon.png")));
    }

    //Bouton Annuler
    private void ajouterBoutonAnnuler() {
        btnAnnuler = new JButton();
        btnAnnuler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                if ((intervalle != 0) || (pnlResultat.isEnregistre())) {
                    String[] choix = {"Oui", "Non"};
                    int reponse = JOptionPane.showOptionDialog(null,
                            "Attention " + utilisateur + ",\n  Voulez-vous vraiment quitter le test en cours ?\n",
                            "Quitter le test",
                            JOptionPane.DEFAULT_OPTION,
                            JOptionPane.QUESTION_MESSAGE,
                            null, choix, choix[1]);
                    switch (reponse) {
                        case 0:
                            if (intervalle == 0) {
                                getContentPane().removeAll();
                            }
                            quitter_test();
                            break;
                        case 1:
                            break;
                        default:
                    }
                } else {
                    String[] choix = {"Enregistrer", "Ne pas enregistrer", "Annuler"};
                    int reponse = JOptionPane.showOptionDialog(null,
                            "Attention " + utilisateur + ",\n  Vous n'avez pas enregistré le resultat en cours"
                            + "\nEnregistrer le resultat ?", "Quitter page de test",
                            JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, choix, choix[0]);
                    if (reponse == 0) {
                        pnlResultat.btnEnregistrerActionPerformed();
                    }
                    if ((reponse == 1) || (reponse == 0)) {
                        quitter_test();
                        getContentPane().remove(pnlResultat);
                        getContentPane().remove(pnlBas);
                        getContentPane().remove(btnResultat);// ne pas enregistrer
                        getContentPane().remove(btnAnnuler);
                    }
                }
            }
        }
        );
        add(btnAnnuler);

        btnAnnuler.setFont(
                new java.awt.Font("Tahoma", 1, 13));
        btnAnnuler.setBounds(
                905, 30, 30, 30);// btnAnnuler.setBounds(100, 530, 190, 29);
        btnAnnuler.setIcon(
                new javax.swing.ImageIcon(getClass().getResource("/images/Windows-Close-Program-icon.png")));
        // (50, 30, 850, 30);
    }

    //Quitter test
    public void quitter_test() {
        getContentPane().remove(listePanneaux.getListing(compteur));
        getContentPane().remove(pnlHaut);
        getContentPane().remove(btnConfirmer);
        getContentPane().remove(btnAnnuler);
        minuteur.cancel();
        intervalle = 0;

        getContentPane().remove(progressBar);
        getContentPane().remove(pnlDebut);
        getContentPane().remove(btnCommencer);
        getContentPane().remove(btnAnnuler);
        getContentPane().add(pnlPrincipal);
        getContentPane().add(pnlGauche);
        btnLancerScenario.setEnabled(true);
        btnParcourir.setEnabled(true);
        btnAfficher.setEnabled(true);

        setContentPane(getContentPane());

        menuFichier.setEnabled(true);
        menuEditer.setEnabled(true);
        menuLangue.setEnabled(true);
    }

    //Vérifier si <terminer de répondre>
    private boolean finReponses() {
        for (int i = 0; i < lesReponses.length; i++) {
            if (lesReponses[i] == null) {
                return false;
            }
        }
        return true;
    }

    // la Fin de test
    public void testTermine() {
        minuteur.cancel();
        intervalle = 0;
        monProfil.setDuree((minuterie * 60) - intervalle);
        //System.out.println(monProfil.getDuree()); //test visuel
        pnlResultat = new PanneauResultat(monProfil, maListeProfils, typeQuestShoisies);
        //Boutton resultat
        btnResultat = new JButton("Resultat");
        btnResultat.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Tests-icon.png")));
        btnResultat.setBackground(new java.awt.Color(205, 205, 205));
        btnResultat.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        btnResultat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                afficherPnlResultat();
            }
        });
        btnResultat.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnResultat.setFont(new Font("Arial", 1, 15));
        //pnlHaut.add(btnResultat);
        btnResultat.setBounds(390, 530, 210, 29);

        afficherPnlResultat();
    }

    //Afficher panneau Resultat
    public void afficherPnlResultat() {
        getContentPane().remove(listePanneaux.getListing(compteur));
        getContentPane().remove(btnConfirmer);
        //   getContentPane().remove(btnAnnuler);
        getContentPane().remove(pnlHaut);
        getContentPane().remove(progressBar);
        getContentPane().remove(btnResultat);
        ajouterPanneauBas();
        getContentPane().add(pnlResultat);
        setContentPane(getContentPane());
    }

    //ajouter panneau bas
    private void ajouterPanneauBas() {
        pnlBas = new JPanel();
        pnlBas.setLayout(null);
        pnlBas.setBackground(new java.awt.Color(0, 102, 102));

        btnNouveauTest = new JButton("Lancer un nouveau test");
        btnNouveauTest.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Test-paper-icon2.png")));

        btnNouveauTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNouveauTestActionPerformed(evt);
            }
        });
        btnRevenir = new JButton("Revenir vers les reponses");
        btnNouveauTest.setFont(new java.awt.Font("Arial Black", 0, 13));
        btnRevenir.setFont(new java.awt.Font("Arial Black", 0, 13));
        btnNouveauTest.setBounds(610, 21, 250, 33);
        btnRevenir.setBounds(30, 21, 250, 33);
        //  btnRevenir.setBackground(new java.awt.Color(0, 102, 102));
        btnRevenir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Go-back-icon.png")));

        btnRevenir.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getContentPane().remove(pnlResultat);
                getContentPane().remove(pnlBas);
                getContentPane().remove(btnResultat);
                getContentPane().add(listePanneaux.getListing(compteur));
                getContentPane().add(pnlHaut);
                getContentPane().add(progressBar);
                getContentPane().add(btnResultat);
                setContentPane(getContentPane());
            }
        });

        pnlBas.add(btnNouveauTest);
        pnlBas.add(btnRevenir);
        pnlBas.setBounds(50, 525, 885, 80);
        add(pnlBas);
    }

    // Méthode Lancer un Nouveau Test
    private void btnNouveauTestActionPerformed(java.awt.event.ActionEvent evt) {
        int reponse = 1;
        if (!pnlResultat.isEnregistre()) {
            String[] choix = {"Enregistrer", "Ne pas enregistrer", "Annuler"};
            reponse = JOptionPane.showOptionDialog(null,
                    "Attention " + utilisateur + ",\n  Vous n'avez pas enregistré le resultat en cours"
                    + "\nEnregistrer le resultat ?", "Lancer un nouveau test",
                    JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE,
                    new javax.swing.ImageIcon(getClass().getResource("/images/Misc-Delete-Database-icon (1).png")), choix, choix[0]);
            switch (reponse) {
                case 0:
                    pnlResultat.btnEnregistrerActionPerformed();
                    break;
                case 1: // ne pas enregistrer
                    break;
                case 2: // annuler
                    break;
                default:
            }
        }
        if ((reponse == 0) || (reponse == 1)) {
            getContentPane().remove(pnlResultat);
            getContentPane().remove(pnlBas);
            fenetre = new FenAvantLancement(5);
            lancerCinqSecondes(5);
            compteur = 0;
            for (int i = 0; i < lesReponses.length; i++) {
                lesReponses[i] = null;
            }
            this.setEnabled(false);
        }
    }
    ;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAfficher;
    private javax.swing.JButton btnLancerScenario;
    private javax.swing.JButton btnParcourir;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JMenuItem itemApropos;
    private javax.swing.JMenuItem itemDiagCasUtilisation;
    private javax.swing.JMenuItem itemDiagClasse;
    private javax.swing.JMenu itemDiagrammes;
    private javax.swing.JMenuItem itemEnregistrer;
    private javax.swing.JMenuItem itemGererQues;
    private javax.swing.JMenuItem itemQuitter;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JLabel lblImage;
    private javax.swing.JMenu menuAide;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menuEditer;
    private javax.swing.JMenu menuFichier;
    private javax.swing.JMenu menuLangue;
    private javax.swing.JPanel pnlGauche;
    private javax.swing.JPanel pnlPrincipal;
    private javax.swing.JRadioButtonMenuItem radBtnAr;
    private javax.swing.JRadioButtonMenuItem radBtnEn;
    private javax.swing.JRadioButtonMenuItem radBtnEs;
    private javax.swing.JRadioButtonMenuItem radBtnFr;
    // End of variables declaration//GEN-END:variables
}
