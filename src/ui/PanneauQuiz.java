/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import java.awt.Font;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseMotionAdapter;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import modele.ImageErreur;
import modele.QCM;
import modele.ResultatExecution;
import utils.GestionImage;

/**
 *
 * @author Ferfar Imad Eddine
 */
public class PanneauQuiz extends javax.swing.JPanel {

    private QCM questionQCM;
    private ImageErreur questionImg;
    private ResultatExecution questionResExe;
    private JCheckBox[] tabChoix;
    private JLabel lblResultat;
    private JLabel lblQuestion;

    private MouseMotionAdapter passerSouris;
    private MouseAdapter sortirSouris;

    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableReponses;
    private JTextArea txtArea;
    private JTextField txtReponse;
    private JLabel lblReponse;

    /**
     * Creates new form PanneauTest2
     */
    
    public PanneauQuiz() {
        initComponents();
    }

    //Constructeur #1
    public PanneauQuiz(QCM questionQCM) {
        this();
        this.questionQCM = questionQCM;
        //this.reponsesQCM = reponsesQCM;
        madifierContenuQCM();
    }
    // //Constructeur #2
    public PanneauQuiz(ImageErreur questionImg) {
        this();
        this.questionImg = questionImg;
        //this.reponsesQCM = reponsesQCM;
        madifierContenuImg();
    }
     //Constructeur #3
    public PanneauQuiz(ResultatExecution questionResExe) {
        this();
        this.questionResExe = questionResExe;
        //this.reponsesQCM = reponsesQCM;
        madifierContenuResExe();
    }
    
    public JCheckBox[] getTabChoix() {
        return tabChoix;
    }

    public MouseMotionAdapter getPasserSouris() {
        return passerSouris;
    }

    public MouseAdapter getSortirSouris() {
        return sortirSouris;
    }

    public JTable getTableReponses() {
        return tableReponses;
    }

    public void setTableReponses(JTable tableReponses) {
        this.tableReponses = tableReponses;
    }

    public JTextField getTxtReponse() {
        return txtReponse;
    }   
    

    public QCM getQuestionQCM() {
        return questionQCM;
    }

    public ImageErreur getQuestionImg() {
        return questionImg;
    }
     public ResultatExecution getQuestionResExe() {
        return questionResExe;
    }

    public boolean getTabChoix(int position) {
        if (tabChoix[position].isSelected()) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblTitre = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(0, 102, 102), null));
        setPreferredSize(new java.awt.Dimension(885, 455));
        setLayout(null);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder(null, new java.awt.Color(0, 102, 102)));

        lblTitre.setFont(new java.awt.Font("Tahoma", 1, 21)); // NOI18N
        lblTitre.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitre.setText("Titre ...");
        lblTitre.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jPanel1.add(lblTitre);

        add(jPanel1);
        jPanel1.setBounds(120, 30, 650, 50);
    }// </editor-fold>//GEN-END:initComponents

    
    // Panneau Resultat d'execution
    private void madifierContenuResExe() {
        lblTitre.setText(questionResExe.getTitre());
        txtArea = new JTextArea(questionResExe.getQuestion());
        txtArea.setBounds(150, 99, 575, 250);
        txtArea.setFont(new Font("Century", 2, 17));
        txtArea.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(0, 102, 102), null, null));
        txtArea.setEditable(false);
        txtReponse = new JTextField();
        txtReponse.setBounds(410, 375, 175, 31);
        txtReponse.setFont(new Font("Arial", 0, 17));
        lblReponse = new JLabel("Le r√©sultat :");
        lblReponse.setBounds(290, 375, 175, 31);
        lblReponse.setFont(new Font("Arial", 1, 17));
        add(lblReponse);
        add(txtReponse);
        add(txtArea);
        setBounds(50, 70, 885, 455);
    }
    // Panneau Image
    private void madifierContenuImg() {
       lblTitre.setText(questionImg.getTitre());
        // lblNbErreurs.setText(questionQCM.getTitre());
        lblQuestion = new JLabel();
        lblQuestion.setBounds(129, 81, 630, 285);
        add(lblQuestion);
        
        //Ajuster l'image selon la les dimenssions de label question
        lblQuestion.setIcon(new ImageIcon(GestionImage.ajusterImage(new ImageIcon(getClass().getResource(questionImg.getlImage())).getImage(),
                lblQuestion.getWidth(), lblQuestion.getHeight())));

        tableReponses = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        DefaultTableModel modele = new DefaultTableModel() {
            Class[] types = new Class[]{java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }
        };
        tableReponses.setModel(modele);
        // Lentete de la table
        String entete[] = new String[]{"N Ligne", "Erreur", "Correction"};
        // Les lignes pour saisie la reponse
        String[][] data = new String[questionImg.getNombreErreurs()][3];

        modele.setDataVector(data, entete);
        JTableHeader header = tableReponses.getTableHeader();
       // header.setBackground(new java.awt.Color(0, 102, 102)); // change the Background color
        header.setForeground(new java.awt.Color(0, 102, 102));
        header.setFont(new Font("Arial", 1, 17));
        ((DefaultTableCellRenderer) header.getDefaultRenderer()).setHorizontalAlignment(JLabel.CENTER);
        tableReponses.setFont(new Font("Arial", 0, 17));
        tableReponses.setRowHeight(25);
        
        jScrollPane1.setViewportView(tableReponses);
        add(jScrollPane1);
        jScrollPane1.setBounds(201, 375, 450, 28 + (questionImg.getNombreErreurs()* 25));
       setBounds(50, 70, 885, 455);
     
    }

    // Panneau QCM
    private void madifierContenuQCM() {
        /*lblQuestion.setText((question.getLaQuestion().length()<75)?   question.getLaQuestion():question.getLaQuestion().substring(0,)             );
        (condition) ? instruction si vrai : instruction si faux*/
        lblTitre.setText(questionQCM.getTitre());
        lblQuestion = new JLabel();
        lblQuestion.setBackground(new java.awt.Color(51, 51, 255));
        lblQuestion.setFont(new java.awt.Font("Arial", 1, 19)); // NOI18N
      // lblQuestion.setText((questionQCM.getLaQuestion().length() > 100) ? verifierLabel(questionQCM.getLaQuestion(), 100) : questionQCM.getLaQuestion());
        lblQuestion.setText("<html>"+questionQCM.getLaQuestion()+"</html>");
        add(lblQuestion);
        lblQuestion.setBounds(91, 91, 710, 75);
        int y = 90;
        tabChoix = new JCheckBox[questionQCM.getListeChoix().size()];

        passerSouris = new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jCheckBox1MouseMoved(evt);
            }
        };
        sortirSouris = new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jCheckBox1MouseExited(evt);
            }
        };
        for (int i = 0; i < questionQCM.getListeChoix().size(); i++) {
            //tabChoix[i] = new JCheckBox((question.getChoix(i).length() > 100) ? verifierLabel(question.getChoix(i), 100) : question.getChoix(i));
            tabChoix[i] = new JCheckBox("<html>" + questionQCM.getChoix(i) + "</html>");
            tabChoix[i].setFont(new java.awt.Font("Arial", 0, 17));
            tabChoix[i].addMouseMotionListener(passerSouris);
            tabChoix[i].addMouseListener(sortirSouris);
            tabChoix[i].setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
         
            tabChoix[i].setBackground(new java.awt.Color(219, 219, 219));
            tabChoix[i].setBounds(73, (y + 65), 750, 50);

            add(tabChoix[i]);
            y += 53;
        }
        setBounds(50, 70, 885, 455);
    }

    private String verifierLabel(String laQuestion, int tailleMax) {
        if (" ".equals(laQuestion.substring(tailleMax - 1, tailleMax))) {
            return ("<html>" + laQuestion.substring(0, tailleMax - 1) + "<br>" + laQuestion.substring(tailleMax, laQuestion.length()) + "</html>");
        } else if (" ".equals(laQuestion.substring(tailleMax, tailleMax + 1))) {
            return ("<html>" + laQuestion.substring(0, tailleMax) + "<br>" + laQuestion.substring(tailleMax + 1, laQuestion.length()) + "+</html>");
        } else {
            String resultat = "";
            String[] tab = laQuestion.substring(0, tailleMax).split(" ", 0);
            for (int i = 0; i < tab.length - 1; i++) {
                resultat = resultat + tab[i] + " ";
            }
            resultat = "<html>" + resultat + "<br>" + tab[tab.length - 1] + laQuestion.substring(tailleMax, laQuestion.length()) + "</html>";
            return resultat;
        }
    }

    //Bouger la souris sur le choix
    private void jCheckBox1MouseMoved(java.awt.event.MouseEvent evt) {
        int i = 0;
        while (evt.getSource() != tabChoix[i]) {
            i++;
        }
        tabChoix[i].setBackground(new java.awt.Color(153, 153, 153));
    }

    //Sortir la souris du choix
    private void jCheckBox1MouseExited(java.awt.event.MouseEvent evt) {
        int i = 0;
        while (evt.getSource() != tabChoix[i]) {
            i++;
        }
        tabChoix[i].setBackground(new java.awt.Color(219, 219, 219));
    }

    //
    private boolean verifierJCheckBox() {
        for (int i = 0; i < tabChoix.length; i++) {
            if (tabChoix[i].isSelected()) {
                return true;
            }
        }
        return false;
    }

    public void afficherLblresultat(boolean flag) {
        lblResultat = new JLabel();
        lblResultat.setFont(new Font("Arial", 3, 13));
        lblResultat.setBounds(675, 381, 205, 72);
        if (flag) {
            lblResultat.setIcon(new ImageIcon(getClass().getResource("/images/ok-icon.png")));
            lblResultat.setText("Bonne reponse !");
        } else {
            lblResultat.setIcon(new ImageIcon(getClass().getResource("/images/Erreur-icon.png")));
            lblResultat.setText("Mauvaise reponse !");
        }
        add(lblResultat);
        repaint();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblTitre;
    // End of variables declaration//GEN-END:variables

}
